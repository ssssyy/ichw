"""
这个程序的思路为按照先横后竖的优先顺序检验处未铺砖的（未置为1）的点，然后进行合法性检验。全局变量列表wall实时更新用于记录铺砖状态（是否置1），
再用另一个全局变量列表result储存每一步。由于每次执行的内容完全相同，故铺砖函数solution不需要参数。
为了解决掉正方形地砖横竖长度相等却会被视为两种铺法的情况，根据正方形地砖铺墙只有0或1种可行方案的特点，又写了一个square_solution函数。
最后一次优化决定又加了一点预先判断，尽量节省在不能铺出的情况下的用时吧……
可视化部分逻辑简单，就没写啥注释
"""

import sys   
sys.setrecursionlimit(1000000)

#创建一个mxn的二维数组代表墙面
list1=input("输入墙的边长a和b")
list2=list1.split(" ")
a=eval(list2[0])
b=eval(list2[1])
wall=[[0 for i in range(a)]for i in range(b)]

list3=input("输入瓷砖的边长m和n")
list4=list3.split(" ")
m=eval(list4[0])
n=eval(list4[1])

def check_0():    #第一步初筛，当通过面积发现不可能实现时直接给出判断
    if (a*b)%(m*n) == 0:
        return True
    else:
        return False
    
def check_1(i,j):     #横向铺的合法性检验函数
    if j+m > a or i+n > b:      #越界情况判断
        return False
    else:
        for k in range(0,n):      #判断即将铺砖的地方是否已经有了砖
            for l in range(0,m):
                if wall[i+k][j+l] != 0:
                    return False
        return True

def check_2(i,j):      #纵向铺的合法性检验函数
    if j+n > a or i+m > b:
        return False
    else:
        for k in range(0,m):
            for l in range(0,n):
                if wall[i+k][j+l] != 0:
                    return False
        return True

    
dot=[0,0]    #用来存储搜索步骤的结果，因没有单独写函数而改用全局变量存一下，每步更新
no=0   #只是number的缩写……
result=[]    #储存方案
plan=[]    #储存所有方案
judge_=False    #用来判断是否能够找到至少一种铺砖的方法

def solution():    #当铺的瓷砖是长方形的时候，用这个函数
    if check_0():    #魔鬼缩进，进一步减少无谓的时间浪费
        global dot
        global no
        global judge_    #一个标识，初始为False，当出现了一种方案时变为True，用于判定是否存在方案
        flag=0
        res=[]
        for i in range(0,b):     #检索出最小的未铺的点
            for j in range(0,a):
                if wall[i][j] == 0:
                    dot=[i,j]
                    flag=1
                    break
            if flag == 1:
                break
        if flag == 0:       #达到跳出循环条件，即铺完了所有的砖
            no += 1        #达到输出条件就将计数器加一
            print("方案"+str(no)+":")      #手动去掉不和谐的部分，因此有了这么多个print……
            print("[",end = "")
            for c in range(len(result)-1):
                print(result[c] , end = ",")     #单纯是为了将一个方案打印在一行中
            print(result[-1], end = "")
            print("]")
            judge_=True
            result1=result.copy()
            plan.append(result1)

        else:      #铺砖过程开始啦！
            i=dot[0]
            j=dot[1]
            if check_1(i,j):       #横向铺砖检验通过
                for k in range(0,n):
                    for l in range(0,m):
                        wall[i+k][j+l]=1
                        xuhao=(i+k)*a+(j+l)
                        res.append(xuhao)
                result.append(res)
                res=[]
                solution()
                for k in range(0,n):    #回溯
                    for l in range(0,m):
                        wall[i+k][j+l]=0
                del result[-1]
            
                if check_2(i,j):        #纵向铺砖检验通过
                    for k in range (0,m):
                        for l in range (0,n):
                            wall[i+k][j+l]=1
                            xuhao=(i+k)*a+(j+l)
                            res.append(xuhao)
                    result.append(res)
                    res=[]
                    solution()
                    for k in range(0,m):    #回溯
                        for l in range(0,n):
                            wall[i+k][j+l]=0
                    del result[-1]
        
            else:   #当尝试第二种铺法时，显然，不再需要回溯后尝试第一种铺法
                if check_2(i,j):       #纵向铺砖检验通过
                    for k in range (0,m):
                        for l in range (0,n):
                            wall[i+k][j+l]=1
                            xuhao=(i+k)*a+(j+l)
                            res.append(xuhao)
                    result.append(res)
                    res=[]
                    solution()
                    for k in range(0,m):
                        for l in range(0,n):
                            wall[i+k][j+l]=0
                    del result[-1]


def square_solution():       #当瓷砖为正方形时采用这个函数——这样可以去重并节约很大一部分计算的时间
    if a%m == 0 and b%m == 0:     #预判断，进一步减少无谓的损耗
        global dot
        global no    #这个no实际上是number的缩写
        flag=0
        res=[]
        global result
        global plan
        for i in range(0,b):       #检索出最小的未铺的点
            for j in range(0,a):
                if wall[i][j] == 0:
                    dot=[i,j]
                    flag=1
                    break
            if flag == 1:
                break
        if flag == 0:       #达到跳出循环条件，即铺完了所有的砖
            no += 1       #达到输出条件就将计数器加一
            print("唯一的方案：")
            print("[",end = "")
            for c in range(len(result)-1):
                print(result[c],end = ",")
            print(result[-1],end = "")          #单纯是为了将一个方案打印在一行内
            print("]")
            plan.append(result.copy())
            
        else:    #铺砖过程
            i=dot[0]
            j=dot[1]
            if check_1(i,j):      #铺砖检验通过
                for k in range(0,n):
                    for l in range(0,m):
                        wall[i+k][j+l]=1
                        xuhao=(i+k)*a+(j+l)
                        res.append(xuhao)
                result.append(res)
                res=[]
                square_solution()
                for k in range(0,n):
                    for l in range(0,m):
                        wall[i+k][j+l]=0         

                        
def main():
    global judge
    if m != n:   #判断是长正方形吗
        solution()
        if judge_ == False:
            print("这怎么可能铺的出来！（皮这一下我很开心）")
    else:
        print("正方形瓷砖就只有一种铺法，挨着铺满不就行了！（皮这一下我很开心）")
        square_solution()

if __name__ == '__main__':    #main函数，请查收！
    main()

    
#下面是可视化部分
index_=eval(input("请输入一个1至方案总数之间的整数"))
list1=plan[index_-1]
step=0
import turtle
turtle.penup()
turtle.speed(0)
y1=-b//2
y2=-b//2+20*(b-1)+1
x1=-a//2
x2=-a//2+20*(a-1)+1
for y in range(y1,y2,20):
    for x in range(x1,x2,20):
        if step < 10:
            turtle.goto(x+8,y+2)
            turtle.write(step)
        else:
            turtle.goto(x+5,y+2)
            turtle.write(step) 
        #标上数字，更容易清晰看出砖块
        turtle.goto(x,y)
        turtle.pendown()
        turtle.forward(20)
        turtle.left(90)
        turtle.forward(20)
        turtle.left(90)
        turtle.forward(20)
        turtle.left(90)
        turtle.forward(20)
        turtle.left(90)
        turtle.penup()
        step += 1

colors=["LightSlateBlue","Blue","Cyan","Green","Yellow","Gold","IndianRed","HotPink","Magenta","Purple","Maroon"]
#为了不容易出现在同一列上明明是不同的砖块而显示了相同的颜色，设置了十一个颜色，则出现同色的可能性大大降低。
for f in range(0,len(list1)):
    for g in range(0,m*n):
        xu=list1[f][g]    #xu就是序号
        x_=xu%a
        y_=xu//a
        turtle.goto(x1+20*x_,y1+20*y_)
        turtle.pendown()
        turtle.fillcolor(colors[f%11])#同余取色
        turtle.begin_fill()
        turtle.forward(20)
        turtle.left(90)
        turtle.forward(20)
        turtle.left(90)
        turtle.forward(20)
        turtle.left(90)
        turtle.forward(20)
        turtle.left(90)
        turtle.end_fill()
        turtle.penup()
turtle.hideturtle()     
